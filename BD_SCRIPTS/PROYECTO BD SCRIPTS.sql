/*
Creacion de las tablas de la base de datos inventario 
Proyecto Grupo #7
*/

-- Clientes
CREATE TABLE CLIENTES
(
  id_Cliente NUMBER PRIMARY KEY NOT NULL,
  nombre VARCHAR2(20) NOT NULL,
  apellido1 VARCHAR2(20) NOT NULL,
  apellido2 VARCHAR2(20) NOT NULL,
  correo VARCHAR2(35),
  telefono NUMBER
);

-- Tienda
CREATE TABLE TIENDA
(
  id_Tienda NUMBER PRIMARY KEY NOT NULL,
  ubicacion_Tienda VARCHAR2(50) NOT NULL
);

-- Categoria
CREATE TABLE CATEGORIA
(
  id_Categoria NUMBER PRIMARY KEY NOT NULL,
  descripcion VARCHAR2(20) NOT NULL
);

-- Productos
CREATE TABLE PRODUCTOS
(
  id_Producto NUMBER PRIMARY KEY NOT NULL,
  nombre VARCHAR2(35) NOT NULL,
  cantidad NUMBER,
  costo NUMBER NOT NULL,
  estado NUMBER NOT NULL,
  id_Categoria NUMBER,
  id_Tienda NUMBER,
  FOREIGN KEY (id_Categoria) REFERENCES CATEGORIA(id_Categoria),
  FOREIGN KEY (id_Tienda) REFERENCES TIENDA(id_Tienda)
);

-- Devoluciones
CREATE TABLE DEVOLUCIONES
(
  id_Devolucion NUMBER PRIMARY KEY NOT NULL,
  id_Producto NUMBER NOT NULL,
  motivo VARCHAR2(50) NOT NULL,
  FOREIGN KEY (id_Producto) REFERENCES PRODUCTOS(id_Producto)
);

-- Proveedores
CREATE TABLE PROVEEDORES
(
  id_Proveedor NUMBER PRIMARY KEY NOT NULL,
  nombre VARCHAR2(20) NOT NULL,
  direccion VARCHAR2(25),
  telefono NUMBER NOT NULL
);

-- Ingreso Mercaderia
CREATE TABLE INGRESO_MERCADERIA
(
  id_Ingreso NUMBER PRIMARY KEY NOT NULL,
  id_Proveedor NUMBER NOT NULL,
  fecha DATE,
  descripcion VARCHAR2(30) NOT NULL,
  FOREIGN KEY (id_Proveedor) REFERENCES PROVEEDORES(id_Proveedor)
);

-- User Roles
CREATE TABLE USER_ROLES
(
  id_Rol NUMBER PRIMARY KEY NOT NULL,
  descripcion VARCHAR2(20) NOT NULL
);

-- Usuarios
CREATE TABLE USUARIOS
(
  id_Usuario NUMBER PRIMARY KEY NOT NULL,
  nombre VARCHAR2(15) NOT NULL,
  contrasenna VARCHAR2(15) NOT NULL,
  id_Rol NUMBER,
  FOREIGN KEY (id_Rol) REFERENCES USER_ROLES(id_Rol)
);

-- Ventas
CREATE TABLE VENTAS
(
  id_Venta NUMBER PRIMARY KEY NOT NULL,
  id_Cliente NUMBER NOT NULL,
  total_Pagado FLOAT NOT NULL,
  FOREIGN KEY (id_Cliente) REFERENCES CLIENTES(id_Cliente)
);

-- Ventas Detalle (nueva tabla para manejar multiples productos en una venta)
CREATE TABLE VENTAS_DETALLE
(
  id_VentaDetalle NUMBER PRIMARY KEY NOT NULL,
  id_Venta NUMBER NOT NULL,
  id_Producto NUMBER NOT NULL,
  cantidad NUMBER NOT NULL,
  precio_unitario NUMBER NOT NULL,
  FOREIGN KEY (id_Venta) REFERENCES VENTAS(id_Venta),
  FOREIGN KEY (id_Producto) REFERENCES PRODUCTOS(id_Producto)
);

-- Crear una tabla de auditor√≠a para almacenar los cambios en el estado de los productos
CREATE TABLE AUDITORIA_ESTADO_PRODUCTO (
    id_auditoria NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    id_producto NUMBER,
    estado_anterior VARCHAR2(100),
    estado_nuevo VARCHAR2(100),
    fecha_actualizacion TIMESTAMP
);

----------------------------------------------------------
----------------------------------------------------------
/*
Poner desde aca todos los procedimientos almacenados,
funciones, vistas, triggers, etc.
*/
-- Procedimientos almacenados.

-- Proveedor.

-- Crear proveedor

CREATE OR REPLACE PROCEDURE crear_proveedor(
    p_id_proveedor IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_telefono IN NUMBER
)
AS
BEGIN
    INSERT INTO PROVEEDORES (id_proveedor, nombre, direccion, telefono)
    VALUES (p_id_proveedor, p_nombre, p_direccion, p_telefono);
    COMMIT;
END crear_proveedor;

-- Leer proveedor.

CREATE OR REPLACE PROCEDURE leer_proveedor(
    p_id_proveedor IN NUMBER,
    o_nombre OUT VARCHAR2,
    o_direccion OUT VARCHAR2,
    o_telefono OUT NUMBER
)
AS
BEGIN
    SELECT nombre, direccion, telefono
    INTO o_nombre, o_direccion, o_telefono
    FROM PROVEEDORES
    WHERE id_proveedor = p_id_proveedor;
END leer_proveedor;

-- Actualizar proveedor.

CREATE OR REPLACE PROCEDURE actualizar_proveedor(
    p_id_proveedor IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_telefono IN NUMBER
)
AS
BEGIN
    UPDATE PROVEEDORES
    SET nombre = p_nombre,
        direccion = p_direccion,
        telefono = p_telefono
    WHERE id_proveedor = p_id_proveedor;
    COMMIT;
END actualizar_proveedor;

-- Eliminar proveedor.

CREATE OR REPLACE PROCEDURE eliminar_proveedor(
    p_id_proveedor IN NUMBER
)
AS
BEGIN
    DELETE FROM PROVEEDORES
    WHERE id_proveedor = p_id_proveedor;
    COMMIT;
END eliminar_proveedor;

-- Ventas.

-- Crear venta.

CREATE OR REPLACE PROCEDURE crear_venta(
    p_id_venta IN NUMBER,
    p_id_cliente IN NUMBER,
    p_total_pagado IN FLOAT
)
AS
BEGIN
    INSERT INTO VENTAS (id_venta, id_cliente, total_pagado)
    VALUES (p_id_venta, p_id_cliente, p_total_pagado);
    COMMIT;
END crear_venta;

-- Leer venta.

CREATE OR REPLACE PROCEDURE leer_venta(
    p_id_venta IN NUMBER,
    o_id_cliente OUT NUMBER,
    o_total_pagado OUT FLOAT
)
AS
BEGIN
    SELECT id_cliente, total_pagado
    INTO o_id_cliente, o_total_pagado
    FROM VENTAS
    WHERE id_venta = p_id_venta;
END leer_venta;

-- Actualizar venta.

CREATE OR REPLACE PROCEDURE actualizar_venta(
    p_id_venta IN NUMBER,
    p_id_cliente IN NUMBER,
    p_total_pagado IN FLOAT
)
AS
BEGIN
    UPDATE VENTAS
    SET id_cliente = p_id_cliente,
        total_pagado = p_total_pagado
    WHERE id_venta = p_id_venta;
    COMMIT;
END actualizar_venta;

-- Eliminar venta.

CREATE OR REPLACE PROCEDURE eliminar_venta(
    p_id_venta IN NUMBER
)
AS
BEGIN
    DELETE FROM VENTAS
    WHERE id_venta = p_id_venta;
    COMMIT;
END eliminar_venta;

-- Procedimiento para crear un nuevo usuario
CREATE OR REPLACE PROCEDURE CrearUsuario(
    p_id_Usuario IN NUMBER,
    p_nombre IN VARCHAR2,
    p_contrasenna IN VARCHAR2,
    p_id_Rol IN NUMBER
)
AS
BEGIN
    INSERT INTO USUARIOS (id_Usuario, nombre, contrasenna, id_Rol)
    VALUES (p_id_Usuario, p_nombre, p_contrasenna, p_id_Rol);
    COMMIT;
END CrearUsuario;


-- Procedimiento para leer un usuario por su ID
CREATE OR REPLACE PROCEDURE LeerUsuario(
    p_id_Usuario IN NUMBER,
    o_nombre OUT VARCHAR2,
    o_contrasenna OUT VARCHAR2,
    o_id_Rol OUT NUMBER
)
AS
BEGIN
    SELECT nombre, contrasenna, id_Rol
    INTO o_nombre, o_contrasenna, o_id_Rol
    FROM USUARIOS
    WHERE id_Usuario = p_id_Usuario;
END LeerUsuario;


-- Procedimiento para actualizar la informacion de un usuario
CREATE OR REPLACE PROCEDURE ActualizarUsuario(
    p_id_Usuario IN NUMBER,
    p_nombre IN VARCHAR2,
    p_contrasenna IN VARCHAR2,
    p_id_Rol IN NUMBER
)
AS
BEGIN
    UPDATE USUARIOS
    SET nombre = p_nombre,
        contrasenna = p_contrasenna,
        id_Rol = p_id_Rol
    WHERE id_Usuario = p_id_Usuario;
    COMMIT;
END ActualizarUsuario;

-- Procedimiento para eliminar un usuario por su ID
CREATE OR REPLACE PROCEDURE EliminarUsuario(
    p_id_Usuario IN NUMBER
)
AS
BEGIN
    DELETE FROM USUARIOS
    WHERE id_Usuario = p_id_Usuario;
    COMMIT;
END EliminarUsuario;

-- Procedimiento para crear un nuevo detalle de venta
CREATE OR REPLACE PROCEDURE CrearVentaDetalle(
    p_id_VentaDetalle IN NUMBER,
    p_id_Venta IN NUMBER,
    p_id_Producto IN NUMBER,
    p_cantidad IN NUMBER,
    p_precio_unitario IN NUMBER
)
AS
BEGIN
    INSERT INTO VENTAS_DETALLE (id_VentaDetalle, id_Venta, id_Producto, cantidad, precio_unitario)
    VALUES (p_id_VentaDetalle, p_id_Venta, p_id_Producto, p_cantidad, p_precio_unitario);
    COMMIT;
END CrearVentaDetalle;


-- Procedimiento para leer un detalle de venta por su ID
CREATE OR REPLACE PROCEDURE LeerVentaDetalle(
    p_id_VentaDetalle IN NUMBER,
    o_id_Venta OUT NUMBER,
    o_id_Producto OUT NUMBER,
    o_cantidad OUT NUMBER,
    o_precio_unitario OUT NUMBER
)
AS
BEGIN
    SELECT id_Venta, id_Producto, cantidad, precio_unitario
    INTO o_id_Venta, o_id_Producto, o_cantidad, o_precio_unitario
    FROM VENTAS_DETALLE
    WHERE id_VentaDetalle = p_id_VentaDetalle;
END LeerVentaDetalle;


-- Procedimiento para actualizar la informaci n de un detalle de venta
CREATE OR REPLACE PROCEDURE ActualizarVentaDetalle(
    p_id_VentaDetalle IN NUMBER,
    p_id_Venta IN NUMBER,
    p_id_Producto IN NUMBER,
    p_cantidad IN NUMBER,
    p_precio_unitario IN NUMBER
)
AS
BEGIN
    UPDATE VENTAS_DETALLE
    SET id_Venta = p_id_Venta,
        id_Producto = p_id_Producto,
        cantidad = p_cantidad,
        precio_unitario = p_precio_unitario
    WHERE id_VentaDetalle = p_id_VentaDetalle;
    COMMIT;
END ActualizarVentaDetalle;


-- Procedimiento para eliminar un detalle de venta por su ID
CREATE OR REPLACE PROCEDURE EliminarVentaDetalle(
    p_id_VentaDetalle IN NUMBER
)
AS
BEGIN
    DELETE FROM VENTAS_DETALLE
    WHERE id_VentaDetalle = p_id_VentaDetalle;
    COMMIT;
END EliminarVentaDetalle;

/*Procedimientos almacenados para clientes (CRUD)*/

--INSERTAR
CREATE OR REPLACE PROCEDURE sp_insertar_cliente(
  p_id_cliente IN CLIENTES.id_Cliente%TYPE,
  p_nombre IN CLIENTES.nombre%TYPE,
  p_apellido1 IN CLIENTES.apellido1%TYPE,
  p_apellido2 IN CLIENTES.apellido2%TYPE,
  p_correo IN CLIENTES.correo%TYPE,
  p_telefono IN CLIENTES.telefono%TYPE)
IS
BEGIN
  INSERT INTO CLIENTES(id_Cliente, nombre, apellido1, apellido2, correo, telefono)
  VALUES (p_id_cliente, p_nombre, p_apellido1, p_apellido2, p_correo, p_telefono);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END;

--LEER
CREATE OR REPLACE PROCEDURE sp_leer_cliente(
  p_id_cliente IN CLIENTES.id_Cliente%TYPE,
  o_nombre OUT CLIENTES.nombre%TYPE,
  o_apellido1 OUT CLIENTES.apellido1%TYPE,
  o_apellido2 OUT CLIENTES.apellido2%TYPE,
  o_correo OUT CLIENTES.correo%TYPE,
  o_telefono OUT CLIENTES.telefono%TYPE)
IS
BEGIN
  SELECT nombre, apellido1, apellido2, correo, telefono
  INTO o_nombre, o_apellido1, o_apellido2, o_correo, o_telefono
  FROM CLIENTES
  WHERE id_Cliente = p_id_cliente;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    o_nombre := NULL;
    o_apellido1 := NULL;
    o_apellido2 := NULL;
    o_correo := NULL;
    o_telefono := NULL;
  WHEN OTHERS THEN
    RAISE;
END;

--ACTUALIZAR
CREATE OR REPLACE PROCEDURE sp_actualizar_cliente(
  p_id_cliente IN CLIENTES.id_Cliente%TYPE,
  p_nombre IN CLIENTES.nombre%TYPE,
  p_apellido1 IN CLIENTES.apellido1%TYPE,
  p_apellido2 IN CLIENTES.apellido2%TYPE,
  p_correo IN CLIENTES.correo%TYPE,
  p_telefono IN CLIENTES.telefono%TYPE)
IS
BEGIN
  UPDATE CLIENTES
  SET nombre = p_nombre,
      apellido1 = p_apellido1,
      apellido2 = p_apellido2,
      correo = p_correo,
      telefono = p_telefono
  WHERE id_Cliente = p_id_cliente;
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END;

--BORRAR
CREATE OR REPLACE PROCEDURE sp_borrar_cliente(
  p_id_cliente IN CLIENTES.id_Cliente%TYPE)
IS
BEGIN
  DELETE FROM CLIENTES
  WHERE id_Cliente = p_id_cliente;
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END;

--Agregar producto
CREATE OR REPLACE PROCEDURE sp_insertar_producto(
    p_id_producto IN PRODUCTOS.id_Producto%TYPE,
    p_nombre IN PRODUCTOS.nombre%TYPE,
    p_cantidad IN PRODUCTOS.cantidad%TYPE,
    p_costo IN PRODUCTOS.costo%TYPE,
    p_estado IN PRODUCTOS.estado%TYPE,
    p_id_categoria IN PRODUCTOS.id_Categoria%TYPE,
    p_id_tienda IN PRODUCTOS.id_Tienda%TYPE
)
IS
BEGIN
    INSERT INTO PRODUCTOS (id_Producto, nombre, cantidad, costo, estado, id_Categoria, id_Tienda)
    VALUES (p_id_producto, p_nombre, p_cantidad, p_costo, p_estado, p_id_categoria, p_id_tienda);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END sp_insertar_producto;

--leer producto
CREATE OR REPLACE PROCEDURE sp_leer_producto(
  p_id_producto IN PRODUCTOS.id_Producto%TYPE,
  o_nombre OUT PRODUCTOS.nombre%TYPE,
  o_cantidad OUT PRODUCTOS.cantidad%TYPE,
  o_costo OUT PRODUCTOS.costo%TYPE,
  o_estado OUT PRODUCTOS.estado%TYPE,
  o_id_categoria OUT PRODUCTOS.id_Categoria%TYPE,
  o_id_tienda OUT PRODUCTOS.id_Tienda%TYPE)
IS
BEGIN
  SELECT nombre, cantidad, costo, estado, id_Categoria, id_Tienda
  INTO o_nombre, o_cantidad, o_costo, o_estado, o_id_categoria, o_id_tienda
  FROM PRODUCTOS
  WHERE id_Producto = p_id_producto;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    o_nombre := NULL;
    o_cantidad := NULL;
    o_costo := NULL;
    o_estado := NULL;
    o_id_categoria := NULL;
    o_id_tienda := NULL;
  WHEN OTHERS THEN
    RAISE;
END;


--Actualizar producto
CREATE OR REPLACE PROCEDURE sp_actualizar_producto(
    p_id_producto IN PRODUCTOS.id_Producto%TYPE,
    p_nombre IN PRODUCTOS.nombre%TYPE,
    p_cantidad IN PRODUCTOS.cantidad%TYPE,
    p_costo IN PRODUCTOS.costo%TYPE,
    p_estado IN PRODUCTOS.estado%TYPE,
    p_id_categoria IN PRODUCTOS.id_Categoria%TYPE,
    p_id_tienda IN PRODUCTOS.id_Tienda%TYPE
)
IS
BEGIN
    UPDATE PRODUCTOS
    SET nombre = p_nombre,
        cantidad = p_cantidad,
        costo = p_costo,
        estado = p_estado,
        id_Categoria = p_id_categoria,
        id_Tienda = p_id_tienda
    WHERE id_Producto = p_id_producto;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END sp_actualizar_producto;

--Eliminar producto
CREATE OR REPLACE PROCEDURE sp_eliminar_producto(
    p_id_producto IN PRODUCTOS.id_Producto%TYPE
)
IS
BEGIN
    DELETE FROM PRODUCTOS
    WHERE id_Producto = p_id_producto;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END sp_eliminar_producto;

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------

-- Vistas.

CREATE OR REPLACE VIEW VISTA_PROVEEDORES_SUMINISTRO AS
SELECT P.id_Proveedor, P.nombre AS nombre_proveedor, P.direccion AS direccion_proveedor, P.telefono AS telefono_proveedor,
       COUNT(IM.id_Ingreso) AS cantidad_ingresos
FROM PROVEEDORES P
LEFT JOIN INGRESO_MERCADERIA IM ON P.id_Proveedor = IM.id_Proveedor
GROUP BY P.id_Proveedor, P.nombre, P.direccion, P.telefono;

CREATE OR REPLACE VIEW VISTA_PRODUCTOS_PRECIOS AS
SELECT P.id_Producto, P.nombre AS nombre_producto, P.cantidad, P.costo, C.descripcion AS categoria, T.ubicacion_Tienda AS ubicacion_tienda
FROM PRODUCTOS P
LEFT JOIN CATEGORIA C ON P.id_Categoria = C.id_Categoria
LEFT JOIN TIENDA T ON P.id_Tienda = T.id_Tienda;


CREATE OR REPLACE VIEW VISTA_INGRESOS_POR_PROVEEDOR AS
SELECT PR.id_Proveedor, PR.nombre AS nombre_proveedor, IM.id_Ingreso, IM.fecha, IM.descripcion
FROM PROVEEDORES PR
INNER JOIN INGRESO_MERCADERIA IM ON PR.id_Proveedor = IM.id_Proveedor;


CREATE OR REPLACE VIEW VISTA_PRODUCTOS_AGOTADOS AS
SELECT id_Producto, nombre AS nombre_producto, cantidad
FROM PRODUCTOS
WHERE cantidad = 0;


CREATE OR REPLACE VIEW VISTA_USUARIOS_Y_ROLES AS
SELECT U.id_Usuario, U.nombre AS nombre_usuario, UR.descripcion AS rol
FROM USUARIOS U
LEFT JOIN USER_ROLES UR ON U.id_Rol = UR.id_Rol;


CREATE OR REPLACE VIEW VISTA_PRODUCTOS_POR_CATEGORIA AS
SELECT P.id_Producto, P.nombre AS nombre_producto, P.cantidad, P.costo, C.descripcion AS categoria
FROM PRODUCTOS P
INNER JOIN CATEGORIA C ON P.id_Categoria = C.id_Categoria;


CREATE OR REPLACE VIEW VISTA_USUARIOS_CON_ROL AS
SELECT U.id_Usuario, U.nombre AS nombre_usuario, UR.descripcion AS rol
FROM USUARIOS U
LEFT JOIN USER_ROLES UR ON U.id_Rol = UR.id_Rol;


CREATE OR REPLACE VIEW VISTA_PRODUCTOS_MAS_VENDIDOS AS
SELECT VD.id_Producto, P.nombre AS nombre_producto, SUM(VD.cantidad) AS cantidad_vendida
FROM VENTAS_DETALLE VD
INNER JOIN PRODUCTOS P ON VD.id_Producto = P.id_Producto
GROUP BY VD.id_Producto, P.nombre
ORDER BY cantidad_vendida DESC;


CREATE OR REPLACE VIEW VISTA_CLIENTES_MAYOR_GASTO AS
SELECT V.id_Cliente, CONCAT(C.nombre, ' ', C.apellido1, ' ', C.apellido2) AS nombre_cliente, SUM(V.total_Pagado) AS total_gastado
FROM VENTAS V
INNER JOIN CLIENTES C ON V.id_Cliente = C.id_Cliente
GROUP BY V.id_Cliente, C.nombre, C.apellido1, C.apellido2
ORDER BY total_gastado DESC;


CREATE OR REPLACE VIEW VISTA_ESTADO_PRODUCTOS_POR_TIENDA AS
SELECT P.id_Producto, P.nombre AS nombre_producto, P.cantidad, P.estado, T.ubicacion_Tienda AS ubicacion_tienda
FROM PRODUCTOS P
INNER JOIN TIENDA T ON P.id_Tienda = T.id_Tienda;

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
-- Cursores.

CREATE OR REPLACE PROCEDURE cursor_total_ventas_cliente(
    p_id_cliente IN NUMBER,
    resultado_cursor OUT NUMBER
)
AS
BEGIN
    SELECT SUM(total_Pagado) INTO resultado_cursor
    FROM VENTAS
    WHERE id_Cliente = p_id_cliente;
END cursor_total_ventas_cliente;

CREATE OR REPLACE PROCEDURE cursor_devoluciones_por_motivo(
    motivo IN VARCHAR2,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN resultado_cursor FOR
        SELECT id_Devolucion, id_Producto
        FROM DEVOLUCIONES
        WHERE motivo = motivo;
END cursor_devoluciones_por_motivo;

CREATE OR REPLACE PROCEDURE cursor_promedio_costos_productos(
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN resultado_cursor FOR
        SELECT C.descripcion AS categoria, AVG(P.costo) AS promedio_costo
        FROM PRODUCTOS P
        JOIN CATEGORIA C ON P.id_Categoria = C.id_Categoria
        GROUP BY C.descripcion;
END cursor_promedio_costos_productos;

CREATE OR REPLACE PROCEDURE cursor_contar_productos_tienda(
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN resultado_cursor FOR
        SELECT T.ubicacion_Tienda AS ubicacion_tienda, COUNT(*) AS cantidad_productos
        FROM PRODUCTOS P
        JOIN TIENDA T ON P.id_Tienda = T.id_Tienda
        GROUP BY T.ubicacion_Tienda;
END cursor_contar_productos_tienda;


CREATE OR REPLACE PROCEDURE cursor_total_ingresos_proveedor(
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN resultado_cursor FOR
        SELECT P.nombre AS nombre_proveedor, SUM(IM.cantidad * IM.costo) AS total_ingresos
        FROM PROVEEDORES P
        LEFT JOIN INGRESO_MERCADERIA IM ON P.id_Proveedor = IM.id_Proveedor
        GROUP BY P.nombre;
END cursor_total_ingresos_proveedor;


CREATE OR REPLACE PROCEDURE cursor_detalle_ventas_cliente(
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN resultado_cursor FOR
        SELECT C.nombre AS nombre_cliente, COUNT(V.id_Venta) AS cantidad_ventas,
               SUM(V.total_Pagado) AS total_pagado, MAX(V.fecha) AS ultima_compra
        FROM CLIENTES C
        LEFT JOIN VENTAS V ON C.id_Cliente = V.id_Cliente
        GROUP BY C.nombre;
END cursor_detalle_ventas_cliente;


CREATE OR REPLACE PROCEDURE cursor_promedio_precios_categoria(
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN resultado_cursor FOR
        SELECT C.descripcion AS categoria, AVG(P.costo) AS promedio_precio
        FROM PRODUCTOS P
        JOIN CATEGORIA C ON P.id_Categoria = C.id_Categoria
        GROUP BY C.descripcion;
END cursor_promedio_precios_categoria;

CREATE OR REPLACE PROCEDURE cursor_insertar_tienda(
    p_id_tienda IN TIENDA.id_Tienda%TYPE,
    p_ubicacion IN TIENDA.ubicacion_Tienda%TYPE,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    INSERT INTO TIENDA (id_Tienda, ubicacion_Tienda)
    VALUES (p_id_tienda, p_ubicacion);
    COMMIT;

    OPEN resultado_cursor FOR
        SELECT 'Tienda insertada correctamente' AS mensaje FROM DUAL;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        OPEN resultado_cursor FOR
            SELECT 'Error al insertar la tienda' AS mensaje FROM DUAL;
END cursor_insertar_tienda;


CREATE OR REPLACE PROCEDURE cursor_leer_tienda(
    p_id_tienda IN TIENDA.id_Tienda%TYPE,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN resultado_cursor FOR
        SELECT ubicacion_Tienda
        FROM TIENDA
        WHERE id_Tienda = p_id_tienda;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        OPEN resultado_cursor FOR
            SELECT 'No se encontr√≥ la tienda' AS mensaje FROM DUAL;
    WHEN OTHERS THEN
        RAISE;
END cursor_leer_tienda;


CREATE OR REPLACE PROCEDURE cursor_actualizar_tienda(
    p_id_tienda IN TIENDA.id_Tienda%TYPE,
    p_ubicacion IN TIENDA.ubicacion_Tienda%TYPE,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    UPDATE TIENDA
    SET ubicacion_Tienda = p_ubicacion
    WHERE id_Tienda = p_id_tienda;
    COMMIT;

    OPEN resultado_cursor FOR
        SELECT 'Tienda actualizada correctamente' AS mensaje FROM DUAL;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        OPEN resultado_cursor FOR
            SELECT 'Error al actualizar la tienda' AS mensaje FROM DUAL;
END cursor_actualizar_tienda;


CREATE OR REPLACE PROCEDURE cursor_eliminar_tienda(
    p_id_tienda IN TIENDA.id_Tienda%TYPE,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    DELETE FROM TIENDA
    WHERE id_Tienda = p_id_tienda;
    COMMIT;

    OPEN resultado_cursor FOR
        SELECT 'Tienda eliminada correctamente' AS mensaje FROM DUAL;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        OPEN resultado_cursor FOR
            SELECT 'Error al eliminar la tienda' AS mensaje FROM DUAL;
END cursor_eliminar_tienda;


CREATE OR REPLACE PROCEDURE cursor_insertar_categoria(
    p_id_categoria IN CATEGORIA.id_Categoria%TYPE,
    p_descripcion IN CATEGORIA.descripcion%TYPE,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    INSERT INTO CATEGORIA (id_Categoria, descripcion)
    VALUES (p_id_categoria, p_descripcion);
    COMMIT;

    OPEN resultado_cursor FOR
        SELECT 'Categor√≠a insertada correctamente' AS mensaje FROM DUAL;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        OPEN resultado_cursor FOR
            SELECT 'Error al insertar la categor√≠a' AS mensaje FROM DUAL;
END cursor_insertar_categoria;


CREATE OR REPLACE PROCEDURE cursor_leer_categoria(
    p_id_categoria IN CATEGORIA.id_Categoria%TYPE,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN resultado_cursor FOR
        SELECT descripcion
        FROM CATEGORIA
        WHERE id_Categoria = p_id_categoria;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        OPEN resultado_cursor FOR
            SELECT 'No se encontr√≥ la categor√≠a' AS mensaje FROM DUAL;
    WHEN OTHERS THEN
        RAISE;
END cursor_leer_categoria;


CREATE OR REPLACE PROCEDURE cursor_actualizar_categoria(
    p_id_categoria IN CATEGORIA.id_Categoria%TYPE,
    p_descripcion IN CATEGORIA.descripcion%TYPE,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    UPDATE CATEGORIA
    SET descripcion = p_descripcion
    WHERE id_Categoria = p_id_categoria;
    COMMIT;

    OPEN resultado_cursor FOR
        SELECT 'Categor√≠a actualizada correctamente' AS mensaje FROM DUAL;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        OPEN resultado_cursor FOR
            SELECT 'Error al actualizar la categor√≠a' AS mensaje FROM DUAL;
END cursor_actualizar_categoria;


CREATE OR REPLACE PROCEDURE cursor_eliminar_categoria(
    p_id_categoria IN CATEGORIA.id_Categoria%TYPE,
    resultado_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    DELETE FROM CATEGORIA
    WHERE id_Categoria = p_id_categoria;
    COMMIT;

    OPEN resultado_cursor FOR
        SELECT 'Categor√≠a eliminada correctamente' AS mensaje FROM DUAL;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        OPEN resultado_cursor FOR
            SELECT 'Error al eliminar la categor√≠a' AS mensaje FROM DUAL;
END cursor_eliminar_categoria;

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------

-- Funciones.

CREATE OR REPLACE FUNCTION calcular_total_ventas_cliente(
    p_id_cliente IN NUMBER
)
RETURN NUMBER
AS
  total_ventas NUMBER;
BEGIN
  SELECT SUM(total_Pagado) INTO total_ventas
  FROM VENTAS
  WHERE id_Cliente = p_id_cliente;
  RETURN total_ventas;
END calcular_total_ventas_cliente;

CREATE OR REPLACE FUNCTION calcular_total_devoluciones_por_motivo(
    motivo IN VARCHAR2
)
RETURN NUMBER
AS
    total_devoluciones NUMBER := 0;
    devolucion_rec DEVOLUCIONES%ROWTYPE;
    detalle_cursor SYS_REFCURSOR;
BEGIN
    OPEN detalle_cursor FOR
        SELECT COUNT(*) AS total
        FROM DEVOLUCIONES
        WHERE motivo = motivo;
    
    FETCH detalle_cursor INTO total_devoluciones;
    CLOSE detalle_cursor;
    
    RETURN total_devoluciones;
END calcular_total_devoluciones_por_motivo;

CREATE OR REPLACE FUNCTION obtener_promedio_costos_categoria
RETURN SYS_REFCURSOR
AS
  resultado_cursor SYS_REFCURSOR;
BEGIN
  cursor_promedio_costos_productos(resultado_cursor);
  RETURN resultado_cursor;
END obtener_promedio_costos_categoria;

CREATE OR REPLACE FUNCTION contar_productos_tienda
RETURN SYS_REFCURSOR
AS
  resultado_cursor SYS_REFCURSOR;
BEGIN
  cursor_contar_productos_tienda(resultado_cursor);
  RETURN resultado_cursor;
END contar_productos_tienda;

CREATE OR REPLACE FUNCTION Reporte_Ventas_Mensual (mes INT, anno INT)
RETURN VARCHAR2
AS
    reporte VARCHAR2(4000);
BEGIN
    -- Inicializamos el reporte
    reporte := 'Informe de Ventas para ' || TO_CHAR(mes, 'FM00') || '/' || TO_CHAR(anno) || ':' || CHR(10);

    -- Loop a trav√©s de cada d√≠a del mes
    FOR dia IN 1..31 LOOP
        -- Obtenemos el total de ventas para el d√≠a actual
        SELECT SUM(total_Pagado)
        INTO total_ventas
        FROM VENTAS
        WHERE EXTRACT(MONTH FROM fecha) = mes
        AND EXTRACT(YEAR FROM fecha) = anno
        AND EXTRACT(DAY FROM fecha) = dia;

        -- Agregamos el total de ventas al reporte
        IF total_ventas IS NOT NULL THEN
            reporte := reporte || TO_CHAR(dia, 'FM00') || '/' || TO_CHAR(mes, 'FM00') || '/' || TO_CHAR(anno) || ': ' || total_ventas || CHR(10);
        END IF;
    END LOOP;

    RETURN reporte;
END;

CREATE OR REPLACE FUNCTION Promedio_Ventas_Diarias (mes INT, a√±o INT)
RETURN NUMBER
AS
    total_ventas NUMBER;
    dias_mes NUMBER;
    promedio NUMBER;
BEGIN
    -- Calculamos el total de ventas para el mes
    SELECT SUM(total_Pagado)
    INTO total_ventas
    FROM VENTAS
    WHERE EXTRACT(MONTH FROM fecha) = mes
    AND EXTRACT(YEAR FROM fecha) = a√±o;

    -- Calculamos el n√∫mero de d√≠as en el mes
    dias_mes := EXTRACT(DAY FROM LAST_DAY(TO_DATE(mes || '-' || a√±o, 'MM-YYYY')));

    -- Calculamos el promedio de ventas diarias
    IF total_ventas IS NOT NULL AND dias_mes <> 0 THEN
        promedio := total_ventas / dias_mes;
    ELSE
        promedio := 0;
    END IF;

    RETURN promedio;
END;

/*Funcion para obtener el correo de un cliente por medio de su ID*/

CREATE OR REPLACE FUNCTION fn_get_cliente_email(p_id_Cliente IN CLIENTES.id_Cliente%TYPE)
RETURN CLIENTES.correo%TYPE
AS
  v_correo CLIENTES.correo%TYPE;
BEGIN
  SELECT correo INTO v_correo
  FROM CLIENTES
  WHERE id_Cliente = p_id_Cliente;

  RETURN v_correo;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
END;

/*Funcion para verificar la existencia de un proveedor*/

CREATE OR REPLACE FUNCTION fn_existe_proveedor(p_id_Proveedor IN PROVEEDORES.id_Proveedor%TYPE)
RETURN NUMBER
AS
  v_existe NUMBER(1);
BEGIN
  SELECT COUNT(*)
  INTO v_existe
  FROM PROVEEDORES
  WHERE id_Proveedor = p_id_Proveedor;

  IF v_existe > 0 THEN
  DBMS_OUTPUT.PUT_LINE('Proveedor si existe en la base de datos');
    RETURN 1; -- Proveedor existe
    
  ELSE
  DBMS_OUTPUT.PUT_LINE('Proveedor no existe en la base de datos');
    RETURN 0; -- Proveedor no existe
    
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    -- En caso de error, se podrÔøΩa retornar un valor especÔøΩfico o lanzar la excepciÔøΩn
    RAISE;
END fn_existe_proveedor;

CREATE OR REPLACE FUNCTION obtener_producto_mas_vendido
RETURN VARCHAR2
AS
    nombre_producto VARCHAR2(100);
    cantidad_vendida NUMBER;
BEGIN
    SELECT nombre, SUM(cantidad)
    INTO nombre_producto, cantidad_vendida
    FROM VENTAS_DETALLE
    GROUP BY nombre
    ORDER BY SUM(cantidad) DESC;

    RETURN nombre_producto || ' - Cantidad vendida: ' || TO_CHAR(cantidad_vendida);
END obtener_producto_mas_vendido;


CREATE OR REPLACE FUNCTION verificar_existencia_producto(
    p_id_producto IN NUMBER
)
RETURN BOOLEAN
AS
    producto_existente NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO producto_existente
    FROM PRODUCTOS
    WHERE id_Producto = p_id_producto;

    IF producto_existente > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END verificar_existencia_producto;


CREATE OR REPLACE FUNCTION obtener_ultima_venta_realizada
RETURN DATE
AS
    ultima_venta DATE;
BEGIN
    SELECT MAX(fecha)
    INTO ultima_venta
    FROM VENTAS;

    RETURN ultima_venta;
END obtener_ultima_venta_realizada;

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------

--Paquetes

--1. Paquete de gesti√≥n de clientes
CREATE OR REPLACE PACKAGE cliente_pkg AS
    PROCEDURE agregar_cliente(
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_email IN VARCHAR2
    );
    
    PROCEDURE actualizar_cliente(
        p_id_cliente IN NUMBER,
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_email IN VARCHAR2
    );

    PROCEDURE eliminar_cliente(
        p_id_cliente IN NUMBER
    );

    FUNCTION buscar_cliente_por_id(
        p_id_cliente IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_cliente_por_email(
        p_email IN VARCHAR2
    ) RETURN SYS_REFCURSOR;
END cliente_pkg;

CREATE OR REPLACE PACKAGE BODY cliente_pkg AS
    PROCEDURE agregar_cliente(
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_email IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO CLIENTES (nombre, apellido, correo) VALUES (p_nombre, p_apellido, p_email);
        COMMIT;
    END agregar_cliente;

    PROCEDURE actualizar_cliente(
        p_id_cliente IN NUMBER,
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_email IN VARCHAR2
    ) IS
    BEGIN
        UPDATE CLIENTES SET nombre = p_nombre, apellido = p_apellido, correo = p_email
        WHERE id_Cliente = p_id_cliente;
        COMMIT;
    END actualizar_cliente;

    PROCEDURE eliminar_cliente(
        p_id_cliente IN NUMBER
    ) IS
    BEGIN
        DELETE FROM CLIENTES WHERE id_Cliente = p_id_cliente;
        COMMIT;
    END eliminar_cliente;

    FUNCTION buscar_cliente_por_id(
        p_id_cliente IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        cliente_cursor SYS_REFCURSOR;
    BEGIN
        OPEN cliente_cursor FOR
            SELECT * FROM CLIENTES WHERE id_Cliente = p_id_cliente;
        RETURN cliente_cursor;
    END buscar_cliente_por_id;

    FUNCTION buscar_cliente_por_email(
        p_email IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        cliente_cursor SYS_REFCURSOR;
    BEGIN
        OPEN cliente_cursor FOR
            SELECT * FROM CLIENTES WHERE correo = p_email;
        RETURN cliente_cursor;
    END buscar_cliente_por_email;
END cliente_pkg;


--2. Paquete de gesti√≥n de productos
CREATE OR REPLACE PACKAGE producto_pkg AS
    PROCEDURE agregar_producto(
        p_nombre IN VARCHAR2,
        p_precio IN NUMBER,
        p_stock IN NUMBER
    );

    PROCEDURE actualizar_producto(
        p_id_producto IN NUMBER,
        p_nombre IN VARCHAR2,
        p_precio IN NUMBER,
        p_stock IN NUMBER
    );

    PROCEDURE eliminar_producto(
        p_id_producto IN NUMBER
    );

    FUNCTION buscar_producto_por_id(
        p_id_producto IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_producto_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR;
END producto_pkg;

CREATE OR REPLACE PACKAGE BODY producto_pkg AS
    PROCEDURE agregar_producto(
        p_nombre IN VARCHAR2,
        p_precio IN NUMBER,
        p_stock IN NUMBER
    ) IS
    BEGIN
        INSERT INTO PRODUCTOS (nombre, precio, cantidad) VALUES (p_nombre, p_precio, p_stock);
        COMMIT;
    END agregar_producto;

    PROCEDURE actualizar_producto(
        p_id_producto IN NUMBER,
        p_nombre IN VARCHAR2,
        p_precio IN NUMBER,
        p_stock IN NUMBER
    ) IS
    BEGIN
        UPDATE PRODUCTOS SET nombre = p_nombre, precio = p_precio, cantidad = p_stock
        WHERE id_Producto = p_id_producto;
        COMMIT;
    END actualizar_producto;

    PROCEDURE eliminar_producto(
        p_id_producto IN NUMBER
    ) IS
    BEGIN
        DELETE FROM PRODUCTOS WHERE id_Producto = p_id_producto;
        COMMIT;
    END eliminar_producto;

    FUNCTION buscar_producto_por_id(
        p_id_producto IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        producto_cursor SYS_REFCURSOR;
    BEGIN
        OPEN producto_cursor FOR
            SELECT * FROM PRODUCTOS WHERE id_Producto = p_id_producto;
        RETURN producto_cursor;
    END buscar_producto_por_id;

    FUNCTION buscar_producto_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        producto_cursor SYS_REFCURSOR;
    BEGIN
        OPEN producto_cursor FOR
            SELECT * FROM PRODUCTOS WHERE nombre = p_nombre;
        RETURN producto_cursor;
    END buscar_producto_por_nombre;
END producto_pkg;


--3. Paquete de gesti√≥n de ventas
CREATE OR REPLACE PACKAGE venta_pkg AS
    PROCEDURE realizar_venta(
        p_id_cliente IN NUMBER,
        p_id_producto IN NUMBER,
        p_cantidad IN NUMBER
    );

    PROCEDURE calcular_total_venta(
        p_id_venta IN NUMBER
    );

    PROCEDURE obtener_detalle_venta(
        p_id_venta IN NUMBER
    );
END venta_pkg;

CREATE OR REPLACE PACKAGE BODY venta_pkg AS
    PROCEDURE realizar_venta(
        p_id_cliente IN NUMBER,
        p_id_producto IN NUMBER,
        p_cantidad IN NUMBER
    ) IS
    BEGIN
        -- Actualizar el stock del producto vendido
        UPDATE PRODUCTOS
        SET cantidad = cantidad - p_cantidad
        WHERE id_Producto = p_id_producto;

        -- Insertar la venta en la tabla VENTAS
        INSERT INTO VENTAS (id_Cliente, fecha, total_Pagado)
        VALUES (p_id_cliente, SYSDATE, NULL);

        -- Obtener el ID de la venta reci√©n insertada
        DECLARE
            v_id_venta NUMBER;
        BEGIN
            SELECT MAX(id_Venta) INTO v_id_venta FROM VENTAS;
        
            -- Insertar el detalle de la venta en VENTAS_DETALLE
            INSERT INTO VENTAS_DETALLE (id_Venta, id_Producto, cantidad, precio_unitario)
            VALUES (v_id_venta, p_id_producto, p_cantidad, (SELECT precio FROM PRODUCTOS WHERE id_Producto = p_id_producto));
        
            COMMIT;
        END;
    END realizar_venta;

    PROCEDURE calcular_total_venta(
        p_id_venta IN NUMBER
    ) IS
    BEGIN
        -- Calcular el total de una venta
        UPDATE VENTAS
        SET total_Pagado = (SELECT SUM(cantidad * precio_unitario) FROM VENTAS_DETALLE WHERE id_Venta = p_id_venta)
        WHERE id_Venta = p_id_venta;
        
        COMMIT;
    END calcular_total_venta;

    PROCEDURE obtener_detalle_venta(
        p_id_venta IN NUMBER
    ) IS
    BEGIN
        -- Obtener el detalle de una venta
        FOR detalle IN (SELECT * FROM VENTAS_DETALLE WHERE id_Venta = p_id_venta) LOOP
            DBMS_OUTPUT.PUT_LINE('ID Producto: ' || detalle.id_Producto || ', Cantidad: ' || detalle.cantidad || ', Precio unitario: ' || detalle.precio_unitario);
        END LOOP;
    END obtener_detalle_venta;
END venta_pkg;


--4. Paquete de gesti√≥n de proveedores
CREATE OR REPLACE PACKAGE proveedor_pkg AS
    PROCEDURE agregar_proveedor(
        p_nombre IN VARCHAR2,
        p_contacto IN VARCHAR2
    );

    PROCEDURE actualizar_proveedor(
        p_id_proveedor IN NUMBER,
        p_nombre IN VARCHAR2,
        p_contacto IN VARCHAR2
    );

    PROCEDURE eliminar_proveedor(
        p_id_proveedor IN NUMBER
    );

    FUNCTION buscar_proveedor_por_id(
        p_id_proveedor IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_proveedor_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR;
END proveedor_pkg;

CREATE OR REPLACE PACKAGE BODY proveedor_pkg AS
    PROCEDURE agregar_proveedor(
        p_nombre IN VARCHAR2,
        p_contacto IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO PROVEEDORES (nombre, contacto) VALUES (p_nombre, p_contacto);
        COMMIT;
    END agregar_proveedor;

    PROCEDURE actualizar_proveedor(
        p_id_proveedor IN NUMBER,
        p_nombre IN VARCHAR2,
        p_contacto IN VARCHAR2
    ) IS
    BEGIN
        UPDATE PROVEEDORES SET nombre = p_nombre, contacto = p_contacto
        WHERE id_Proveedor = p_id_proveedor;
        COMMIT;
    END actualizar_proveedor;

    PROCEDURE eliminar_proveedor(
        p_id_proveedor IN NUMBER
    ) IS
    BEGIN
        DELETE FROM PROVEEDORES WHERE id_Proveedor = p_id_proveedor;
        COMMIT;
    END eliminar_proveedor;

    FUNCTION buscar_proveedor_por_id(
        p_id_proveedor IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        proveedor_cursor SYS_REFCURSOR;
    BEGIN
        OPEN proveedor_cursor FOR
            SELECT * FROM PROVEEDORES WHERE id_Proveedor = p_id_proveedor;
        RETURN proveedor_cursor;
    END buscar_proveedor_por_id;

    FUNCTION buscar_proveedor_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        proveedor_cursor SYS_REFCURSOR;
    BEGIN
        OPEN proveedor_cursor FOR
            SELECT * FROM PROVEEDORES WHERE nombre = p_nombre;
        RETURN proveedor_cursor;
    END buscar_proveedor_por_nombre;
END proveedor_pkg;


--5. Paquete de gesti√≥n de clientes

CREATE OR REPLACE PACKAGE cliente_pkg AS
    PROCEDURE agregar_cliente(
        p_nombre IN VARCHAR2,
        p_correo IN VARCHAR2
    );

    PROCEDURE actualizar_cliente(
        p_id_cliente IN NUMBER,
        p_nombre IN VARCHAR2,
        p_correo IN VARCHAR2
    );

    PROCEDURE eliminar_cliente(
        p_id_cliente IN NUMBER
    );

    FUNCTION buscar_cliente_por_id(
        p_id_cliente IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_cliente_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_cliente_por_correo(
        p_correo IN VARCHAR2
    ) RETURN SYS_REFCURSOR;
END cliente_pkg;

CREATE OR REPLACE PACKAGE BODY cliente_pkg AS
    PROCEDURE agregar_cliente(
        p_nombre IN VARCHAR2,
        p_correo IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO CLIENTES (nombre, correo) VALUES (p_nombre, p_correo);
        COMMIT;
    END agregar_cliente;

    PROCEDURE actualizar_cliente(
        p_id_cliente IN NUMBER,
        p_nombre IN VARCHAR2,
        p_correo IN VARCHAR2
    ) IS
    BEGIN
        UPDATE CLIENTES SET nombre = p_nombre, correo = p_correo
        WHERE id_Cliente = p_id_cliente;
        COMMIT;
    END actualizar_cliente;

    PROCEDURE eliminar_cliente(
        p_id_cliente IN NUMBER
    ) IS
    BEGIN
        DELETE FROM CLIENTES WHERE id_Cliente = p_id_cliente;
        COMMIT;
    END eliminar_cliente;

    FUNCTION buscar_cliente_por_id(
        p_id_cliente IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        cliente_cursor SYS_REFCURSOR;
    BEGIN
        OPEN cliente_cursor FOR
            SELECT * FROM CLIENTES WHERE id_Cliente = p_id_cliente;
        RETURN cliente_cursor;
    END buscar_cliente_por_id;

    FUNCTION buscar_cliente_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        cliente_cursor SYS_REFCURSOR;
    BEGIN
        OPEN cliente_cursor FOR
            SELECT * FROM CLIENTES WHERE nombre = p_nombre;
        RETURN cliente_cursor;
    END buscar_cliente_por_nombre;

    FUNCTION buscar_cliente_por_correo(
        p_correo IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        cliente_cursor SYS_REFCURSOR;
    BEGIN
        OPEN cliente_cursor FOR
            SELECT * FROM CLIENTES WHERE correo = p_correo;
        RETURN cliente_cursor;
    END buscar_cliente_por_correo;
END cliente_pkg;

--6. Paquete de gesti√≥n de productos

CREATE OR REPLACE PACKAGE producto_pkg AS
    PROCEDURE agregar_producto(
        p_nombre IN VARCHAR2,
        p_precio IN NUMBER,
        p_cantidad IN NUMBER
    );

    PROCEDURE actualizar_producto(
        p_id_producto IN NUMBER,
        p_nombre IN VARCHAR2,
        p_precio IN NUMBER,
        p_cantidad IN NUMBER
    );

    PROCEDURE eliminar_producto(
        p_id_producto IN NUMBER
    );

    FUNCTION buscar_producto_por_id(
        p_id_producto IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_producto_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR;
END producto_pkg;

CREATE OR REPLACE PACKAGE BODY producto_pkg AS
    PROCEDURE agregar_producto(
        p_nombre IN VARCHAR2,
        p_precio IN NUMBER,
        p_cantidad IN NUMBER
    ) IS
    BEGIN
        INSERT INTO PRODUCTOS (nombre, precio, cantidad) VALUES (p_nombre, p_precio, p_cantidad);
        COMMIT;
    END agregar_producto;

    PROCEDURE actualizar_producto(
        p_id_producto IN NUMBER,
        p_nombre IN VARCHAR2,
        p_precio IN NUMBER,
        p_cantidad IN NUMBER
    ) IS
    BEGIN
        UPDATE PRODUCTOS SET nombre = p_nombre, precio = p_precio, cantidad = p_cantidad
        WHERE id_Producto = p_id_producto;
        COMMIT;
    END actualizar_producto;

    PROCEDURE eliminar_producto(
        p_id_producto IN NUMBER
    ) IS
    BEGIN
        DELETE FROM PRODUCTOS WHERE id_Producto = p_id_producto;
        COMMIT;
    END eliminar_producto;

    FUNCTION buscar_producto_por_id(
        p_id_producto IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        producto_cursor SYS_REFCURSOR;
    BEGIN
        OPEN producto_cursor FOR
            SELECT * FROM PRODUCTOS WHERE id_Producto = p_id_producto;
        RETURN producto_cursor;
    END buscar_producto_por_id;

    FUNCTION buscar_producto_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        producto_cursor SYS_REFCURSOR;
    BEGIN
        OPEN producto_cursor FOR
            SELECT * FROM PRODUCTOS WHERE nombre = p_nombre;
        RETURN producto_cursor;
    END buscar_producto_por_nombre;
END producto_pkg;


--7. Paquete de gesti√≥n de ventas

CREATE OR REPLACE PACKAGE venta_pkg AS
    PROCEDURE registrar_venta(
        p_id_cliente IN NUMBER,
        p_fecha IN DATE,
        p_total_pagado IN NUMBER
    );

    PROCEDURE agregar_detalle_venta(
        p_id_venta IN NUMBER,
        p_id_producto IN NUMBER,
        p_cantidad IN NUMBER,
        p_precio_unitario IN NUMBER
    );

    FUNCTION buscar_ventas_cliente(
        p_id_cliente IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_detalle_venta(
        p_id_venta IN NUMBER
    ) RETURN SYS_REFCURSOR;
END venta_pkg;


CREATE OR REPLACE PACKAGE BODY venta_pkg AS
    PROCEDURE registrar_venta(
        p_id_cliente IN NUMBER,
        p_fecha IN DATE,
        p_total_pagado IN NUMBER
    ) IS
    BEGIN
        INSERT INTO VENTAS (id_Cliente, fecha, total_Pagado) VALUES (p_id_cliente, p_fecha, p_total_pagado);
        COMMIT;
    END registrar_venta;

    PROCEDURE agregar_detalle_venta(
        p_id_venta IN NUMBER,
        p_id_producto IN NUMBER,
        p_cantidad IN NUMBER,
        p_precio_unitario IN NUMBER
    ) IS
    BEGIN
        INSERT INTO VENTAS_DETALLE (id_Venta, id_Producto, cantidad, precio_unitario) VALUES (p_id_venta, p_id_producto, p_cantidad, p_precio_unitario);
        COMMIT;
    END agregar_detalle_venta;

    FUNCTION buscar_ventas_cliente(
        p_id_cliente IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        ventas_cursor SYS_REFCURSOR;
    BEGIN
        OPEN ventas_cursor FOR
            SELECT * FROM VENTAS WHERE id_Cliente = p_id_cliente;
        RETURN ventas_cursor;
    END buscar_ventas_cliente;

    FUNCTION buscar_detalle_venta(
        p_id_venta IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        detalle_cursor SYS_REFCURSOR;
    BEGIN
        OPEN detalle_cursor FOR
            SELECT * FROM VENTAS_DETALLE WHERE id_Venta = p_id_venta;
        RETURN detalle_cursor;
    END buscar_detalle_venta;
END venta_pkg;


--8. Paquete de gesti√≥n de proveedore

CREATE OR REPLACE PACKAGE proveedor_pkg AS
    PROCEDURE agregar_proveedor(
        p_nombre IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_telefono IN VARCHAR2
    );

    PROCEDURE actualizar_proveedor(
        p_id_proveedor IN NUMBER,
        p_nombre IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_telefono IN VARCHAR2
    );

    PROCEDURE eliminar_proveedor(
        p_id_proveedor IN NUMBER
    );

    FUNCTION buscar_proveedor_por_id(
        p_id_proveedor IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_proveedor_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_proveedor_por_telefono(
        p_telefono IN VARCHAR2
    ) RETURN SYS_REFCURSOR;
END proveedor_pkg;

CREATE OR REPLACE PACKAGE BODY proveedor_pkg AS
    PROCEDURE agregar_proveedor(
        p_nombre IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_telefono IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO PROVEEDORES (nombre, direccion, telefono) VALUES (p_nombre, p_direccion, p_telefono);
        COMMIT;
    END agregar_proveedor;

    PROCEDURE actualizar_proveedor(
        p_id_proveedor IN NUMBER,
        p_nombre IN VARCHAR2,
        p_direccion IN VARCHAR2,
        p_telefono IN VARCHAR2
    ) IS
    BEGIN
        UPDATE PROVEEDORES SET nombre = p_nombre, direccion = p_direccion, telefono = p_telefono
        WHERE id_Proveedor = p_id_proveedor;
        COMMIT;
    END actualizar_proveedor;

    PROCEDURE eliminar_proveedor(
        p_id_proveedor IN NUMBER
    ) IS
    BEGIN
        DELETE FROM PROVEEDORES WHERE id_Proveedor = p_id_proveedor;
        COMMIT;
    END eliminar_proveedor;

    FUNCTION buscar_proveedor_por_id(
        p_id_proveedor IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        proveedor_cursor SYS_REFCURSOR;
    BEGIN
        OPEN proveedor_cursor FOR
            SELECT * FROM PROVEEDORES WHERE id_Proveedor = p_id_proveedor;
        RETURN proveedor_cursor;
    END buscar_proveedor_por_id;

    FUNCTION buscar_proveedor_por_nombre(
        p_nombre IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        proveedor_cursor SYS_REFCURSOR;
    BEGIN
        OPEN proveedor_cursor FOR
            SELECT * FROM PROVEEDORES WHERE nombre = p_nombre;
        RETURN proveedor_cursor;
    END buscar_proveedor_por_nombre;

    FUNCTION buscar_proveedor_por_telefono(
        p_telefono IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        proveedor_cursor SYS_REFCURSOR;
    BEGIN
        OPEN proveedor_cursor FOR
            SELECT * FROM PROVEEDORES WHERE telefono = p_telefono;
        RETURN proveedor_cursor;
    END buscar_proveedor_por_telefono;
END proveedor_pkg;


--9. Paquete de gesti√≥n de clientes

CREATE OR REPLACE PACKAGE cliente_pkg AS
    PROCEDURE agregar_cliente(
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_telefono IN VARCHAR2
    );

    PROCEDURE actualizar_cliente(
        p_id_cliente IN NUMBER,
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_telefono IN VARCHAR2
    );

    PROCEDURE eliminar_cliente(
        p_id_cliente IN NUMBER
    );

    FUNCTION buscar_cliente_por_id(
        p_id_cliente IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_cliente_por_correo(
        p_correo IN VARCHAR2
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_cliente_por_telefono(
        p_telefono IN VARCHAR2
    ) RETURN SYS_REFCURSOR;
END cliente_pkg;

CREATE OR REPLACE PACKAGE BODY cliente_pkg AS
    PROCEDURE agregar_cliente(
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_telefono IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO CLIENTES (nombre, apellido, correo, telefono) VALUES (p_nombre, p_apellido, p_correo, p_telefono);
        COMMIT;
    END agregar_cliente;

    PROCEDURE actualizar_cliente(
        p_id_cliente IN NUMBER,
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_telefono IN VARCHAR2
    ) IS
    BEGIN
        UPDATE CLIENTES SET nombre = p_nombre, apellido = p_apellido, correo = p_correo, telefono = p_telefono
        WHERE id_Cliente = p_id_cliente;
        COMMIT;
    END actualizar_cliente;

    PROCEDURE eliminar_cliente(
        p_id_cliente IN NUMBER
    ) IS
    BEGIN
        DELETE FROM CLIENTES WHERE id_Cliente = p_id_cliente;
        COMMIT;
    END eliminar_cliente;

    FUNCTION buscar_cliente_por_id(
        p_id_cliente IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        cliente_cursor SYS_REFCURSOR;
    BEGIN
        OPEN cliente_cursor FOR
            SELECT * FROM CLIENTES WHERE id_Cliente = p_id_cliente;
        RETURN cliente_cursor;
    END buscar_cliente_por_id;

    FUNCTION buscar_cliente_por_correo(
        p_correo IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        cliente_cursor SYS_REFCURSOR;
    BEGIN
        OPEN cliente_cursor FOR
            SELECT * FROM CLIENTES WHERE correo = p_correo;
        RETURN cliente_cursor;
    END buscar_cliente_por_correo;

    FUNCTION buscar_cliente_por_telefono(
        p_telefono IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        cliente_cursor SYS_REFCURSOR;
    BEGIN
        OPEN cliente_cursor FOR
            SELECT * FROM CLIENTES WHERE telefono = p_telefono;
        RETURN cliente_cursor;
    END buscar_cliente_por_telefono;
END cliente_pkg;


--10. Paquete de gesti√≥n de empleados

CREATE OR REPLACE PACKAGE empleado_pkg AS
    PROCEDURE agregar_empleado(
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_telefono IN VARCHAR2,
        p_puesto IN VARCHAR2
    );

    PROCEDURE actualizar_empleado(
        p_id_empleado IN NUMBER,
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_telefono IN VARCHAR2,
        p_puesto IN VARCHAR2
    );

    PROCEDURE eliminar_empleado(
        p_id_empleado IN NUMBER
    );

    FUNCTION buscar_empleado_por_id(
        p_id_empleado IN NUMBER
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_empleado_por_correo(
        p_correo IN VARCHAR2
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_empleado_por_telefono(
        p_telefono IN VARCHAR2
    ) RETURN SYS_REFCURSOR;

    FUNCTION buscar_empleado_por_puesto(
        p_puesto IN VARCHAR2
    ) RETURN SYS_REFCURSOR;
END empleado_pkg;


CREATE OR REPLACE PACKAGE BODY empleado_pkg AS
    PROCEDURE agregar_empleado(
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_telefono IN VARCHAR2,
        p_puesto IN VARCHAR2
    ) IS
    BEGIN
        INSERT INTO EMPLEADOS (nombre, apellido, correo, telefono, puesto) VALUES (p_nombre, p_apellido, p_correo, p_telefono, p_puesto);
        COMMIT;
    END agregar_empleado;

    PROCEDURE actualizar_empleado(
        p_id_empleado IN NUMBER,
        p_nombre IN VARCHAR2,
        p_apellido IN VARCHAR2,
        p_correo IN VARCHAR2,
        p_telefono IN VARCHAR2,
        p_puesto IN VARCHAR2
    ) IS
    BEGIN
        UPDATE EMPLEADOS SET nombre = p_nombre, apellido = p_apellido, correo = p_correo, telefono = p_telefono, puesto = p_puesto
        WHERE id_Empleado = p_id_empleado;
        COMMIT;
    END actualizar_empleado;

    PROCEDURE eliminar_empleado(
        p_id_empleado IN NUMBER
    ) IS
    BEGIN
        DELETE FROM EMPLEADOS WHERE id_Empleado = p_id_empleado;
        COMMIT;
    END eliminar_empleado;

    FUNCTION buscar_empleado_por_id(
        p_id_empleado IN NUMBER
    ) RETURN SYS_REFCURSOR IS
        empleado_cursor SYS_REFCURSOR;
    BEGIN
        OPEN empleado_cursor FOR
            SELECT * FROM EMPLEADOS WHERE id_Empleado = p_id_empleado;
        RETURN empleado_cursor;
    END buscar_empleado_por_id;

    FUNCTION buscar_empleado_por_correo(
        p_correo IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        empleado_cursor SYS_REFCURSOR;
    BEGIN
        OPEN empleado_cursor FOR
            SELECT * FROM EMPLEADOS WHERE correo = p_correo;
        RETURN empleado_cursor;
    END buscar_empleado_por_correo;

    FUNCTION buscar_empleado_por_telefono(
        p_telefono IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        empleado_cursor SYS_REFCURSOR;
    BEGIN
        OPEN empleado_cursor FOR
            SELECT * FROM EMPLEADOS WHERE telefono = p_telefono;
        RETURN empleado_cursor;
    END buscar_empleado_por_telefono;

    FUNCTION buscar_empleado_por_puesto(
        p_puesto IN VARCHAR2
    ) RETURN SYS_REFCURSOR IS
        empleado_cursor SYS_REFCURSOR;
    BEGIN
        OPEN empleado_cursor FOR
            SELECT * FROM EMPLEADOS WHERE puesto = p_puesto;
        RETURN empleado_cursor;
    END buscar_empleado_por_puesto;
END empleado_pkg;

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
-- Triggers

CREATE OR REPLACE TRIGGER actualizar_stock_venta
AFTER INSERT ON VENTAS_DETALLE
FOR EACH ROW
BEGIN
    UPDATE PRODUCTOS
    SET cantidad = cantidad - :NEW.cantidad
    WHERE id_Producto = :NEW.id_Producto;
END;

CREATE OR REPLACE TRIGGER actualizar_total_pagado
AFTER INSERT OR DELETE ON VENTAS_DETALLE
FOR EACH ROW
BEGIN
    UPDATE VENTAS
    SET total_Pagado = (SELECT SUM(cantidad * precio_unitario) FROM VENTAS_DETALLE WHERE id_Venta = :NEW.id_Venta)
    WHERE id_Venta = :NEW.id_Venta;
END;


CREATE OR REPLACE TRIGGER evitar_eliminacion_proveedores
BEFORE DELETE ON PROVEEDORES
FOR EACH ROW
DECLARE
    cantidad_ingresos NUMBER;
BEGIN
    SELECT COUNT(*) INTO cantidad_ingresos FROM INGRESO_MERCADERIA WHERE id_Proveedor = :OLD.id_Proveedor;
    IF cantidad_ingresos > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar este proveedor porque tiene ingresos de mercader a asociados.');
    END IF;
END;


CREATE OR REPLACE TRIGGER auditar_estado_producto
AFTER UPDATE OF estado ON PRODUCTOS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_ESTADO_PRODUCTO (id_producto, estado_anterior, estado_nuevo, fecha_actualizacion)
    VALUES (:OLD.id_Producto, :OLD.estado, :NEW.estado, SYSTIMESTAMP);
END;

CREATE OR REPLACE TRIGGER notificar_bajo_stock
AFTER INSERT ON VENTAS_DETALLE
FOR EACH ROW
DECLARE
    v_stock_minimo NUMBER := 10; -- Umbral de stock m√≠nimo
    v_stock_actual NUMBER;
BEGIN
    SELECT cantidad INTO v_stock_actual
    FROM PRODUCTOS
    WHERE id_Producto = :NEW.id_Producto;

    IF v_stock_actual < v_stock_minimo THEN
        DBMS_OUTPUT.PUT_LINE('¬°Alerta! Stock del producto ' || :NEW.id_Producto || ' est√° por debajo del umbral m√≠nimo.');
    END IF;
END;
----------------------------------------------------------
----------------------------------------------------------

--INSERTS

insert into clientes
values (1, 'Diego','Leon', 'Leon', ' jleon@ufide.com', 86307138);

select * from clientes